// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// schema.prisma
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

// MODELS =========================================================================================
model CourseType {
    id   Int    @id @default(autoincrement())
    name String @unique

    recipes CourseTypesOnRecipes[]

    @@map("course_types")
}

model Cuisine {
    id   Int    @id @default(autoincrement())
    name String @unique

    recipes CuisinesOnRecipes[]

    @@map("cuisines")
}

model DietaryRestriction {
    id   Int    @id @default(autoincrement())
    name String @unique

    recipes DietaryRestrictionsOnRecipes[]

    @@map("dietary_restrictions")
}

model DishType {
    id   Int    @id @default(autoincrement())
    name String @unique

    recipes DishTypesOnRecipes[]

    @@map("dish_types")
}

model IngredientAlteration {
    id   Int    @id @default(autoincrement())
    name String @unique

    RecipeIngredients RecipeIngredient[]

    @@map("ingredient_alterations")
}

model IngredientName {
    id       Int     @id @default(autoincrement())
    singular String
    plural   String?

    RecipeIngredients               RecipeIngredient[]
    RecipesIngredientsSubstitutions RecipesIngredientsSubstitutions[]

    @@map("ingredient_names")
}

model IngredientUnit {
    id            Int     @id @default(autoincrement())
    singular      String
    plural        String?
    singularShort String  @map("singular_short")
    pluralShort   String? @map("plural_short")

    RecipeIngredients RecipeIngredient[]

    @@map("ingredient_units")
}

model Recipe {
    id           Int       @id @default(autoincrement())
    createdAt    DateTime  @default(now()) @map("created_at")
    updatedAt    DateTime  @updatedAt @map("updated_at")
    name         String
    sourceName   String    @map("source_name")
    sourceUrl    String?   @map("source_url")
    yieldAmount  Int       @map("yield_amount")
    yieldUnit    YieldUnit @relation(fields: [yieldUnitId], references: [id])
    yieldUnitId  Int       @map("yield_unit_id")
    timePrepMins Int       @map("time_prep_mins")
    timeCookMins Int       @map("time_cook_mins")

    courseTypes         CourseTypesOnRecipes[]
    cuisines            CuisinesOnRecipes[]
    dietaryRestrictions DietaryRestrictionsOnRecipes[]
    dishTypes           DishTypesOnRecipes[]
    recipeIngredients   RecipeIngredient[]
    recipeSteps         RecipeStep[]

    @@map("recipes")
}

model RecipeIngredient {
    id           Int                   @id @default(autoincrement())
    recipe       Recipe                @relation(fields: [recipeId], references: [id])
    recipeId     Int                   @map("recipe_id")
    placement    Int
    section      String?
    amount       String
    unit         IngredientUnit?       @relation(fields: [unitId], references: [id])
    unitId       Int?                  @map("ingredient_unit_id")
    isUnitPlural Boolean               @map("is_unit_plural")
    name         IngredientName        @relation(fields: [nameId], references: [id])
    nameId       Int                   @map("ingredient_name_id")
    isNamePlural Boolean               @map("is_name_plural")
    alteration   IngredientAlteration? @relation(fields: [alterationId], references: [id])
    alterationId Int?                  @map("ingredient_alteration_id")

    RecipesIngredientsSubstitutions RecipesIngredientsSubstitutions[]

    @@map("recipes_ingredients")
}

model RecipeStep {
    id          Int     @id @default(autoincrement())
    recipe      Recipe  @relation(fields: [recipeId], references: [id])
    recipeId    Int     @map("recipe_id")
    placement   Int
    section     String?
    description String

    @@map("recipes_steps")
}

model YieldUnit {
    id       Int     @id @default(autoincrement())
    singular String
    plural   String?

    recipe Recipe[]

    @@map("yield_units")
}

// MODELS - RELATION TABLES =======================================================================
model CourseTypesOnRecipes {
    recipe       Recipe     @relation(fields: [recipeId], references: [id])
    recipeId     Int        @map("recipe_id")
    courseType   CourseType @relation(fields: [courseTypeId], references: [id])
    courseTypeId Int        @map("course_type_id")

    @@id([recipeId, courseTypeId])
    @@map("course_types_on_recipes")
}

model CuisinesOnRecipes {
    recipe    Recipe  @relation(fields: [recipeId], references: [id])
    recipeId  Int     @map("recipe_id")
    cuisine   Cuisine @relation(fields: [cuisineId], references: [id])
    cuisineId Int     @map("cuisine_id")

    @@id([recipeId, cuisineId])
    @@map("cuisines_on_recipes")
}

model DietaryRestrictionsOnRecipes {
    recipe               Recipe             @relation(fields: [recipeId], references: [id])
    recipeId             Int                @map("recipe_id")
    dietaryRestriction   DietaryRestriction @relation(fields: [dietaryRestrictionId], references: [id])
    dietaryRestrictionId Int                @map("dietary_restriction_id")

    @@id([recipeId, dietaryRestrictionId])
    @@map("dietary_restrictions_on_recipes")
}

model DishTypesOnRecipes {
    recipe     Recipe   @relation(fields: [recipeId], references: [id])
    recipeId   Int      @map("recipe_id")
    dishType   DishType @relation(fields: [dishTypeId], references: [id])
    dishTypeId Int      @map("dish_type_id")

    @@id([recipeId, dishTypeId])
    @@map("dish_types_on_recipes")
}

model RecipesIngredientsSubstitutions {
    recipeIngredient   RecipeIngredient @relation(fields: [recipeIngredientId], references: [id])
    recipeIngredientId Int              @map("recipe_ingredient_id")
    ingredientName     IngredientName   @relation(fields: [ingredientNameId], references: [id])
    ingredientNameId   Int              @map("ingredient_name_id")

    @@id([recipeIngredientId, ingredientNameId])
    @@map("recipes_ingredients_substitutions")
}
